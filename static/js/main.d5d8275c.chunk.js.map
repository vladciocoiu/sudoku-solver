{"version":3,"sources":["Components/SudokuGrid/Cell/Cell.jsx","Components/SudokuGrid/SudokuGrid.jsx","Algorithms/ValidityChecker.js","Algorithms/Solver.js","Components/Keyboard/Key/Key.jsx","SVGs/Icons.jsx","Components/Keyboard/Keyboard.jsx","Components/Navbar/Navbar.jsx","Components/TutorialPanel/TutorialPanel.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","props","x","y","gridNumbers","selectedCell","setSelectedCell","currentlyAnimating","className","onClick","SudokuGrid","grid","i","push","j","key","createGrid","valid","row","col","verticalNumber","Math","floor","horizontalNumber","vertical","horizontal","newGrid","changesInOrder","cellsChanged","found","solve","parameterGrid","map","r","backtracking","stop","Key","number","setGridNumbers","newGridNumbers","SolveIcon","id","height","viewBox","width","stroke","strokeLinecap","strokeLinejoin","strokeWidth","xmlns","d","DeleteIcon","ResetIcon","fill","QuestionMarkIcon","XIcon","Keyboard","createNewGridNumbers","setCurrentlyAnimating","isAnimating","setIsAnimating","copy","invalidCells","checkValidity","length","cell","document","querySelector","classList","add","setTimeout","remove","animateGrid","createKeyboard","Navbar","showTutorial","setShowTutorial","TutorialPanel","show","setShow","App","useState","changeSelectedCell","e","code","changeNumberInCell","gridCopy","value","useEffect","addEventListener","removeEventListener","numbers","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5d8275c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Cell.css\";\r\n\r\nexport default function Cell(props) {\r\n   const {\r\n      x,\r\n      y,\r\n      gridNumbers,\r\n      selectedCell,\r\n      setSelectedCell,\r\n      currentlyAnimating,\r\n   } = props;\r\n\r\n   // when the user clicks on a cell, it will become the selected cell\r\n   const handleClick = () => {\r\n      setSelectedCell([x, y]);\r\n   };\r\n\r\n   return (\r\n      <div\r\n         className={\r\n            \"cell cell-\" +\r\n            x +\r\n            \"-\" +\r\n            y +\r\n            (y === 0 ? \" cell-left \" : \"\") +\r\n            (x === 0 ? \" cell-top \" : \"\") +\r\n            (y === 8 ? \" cell-right \" : \"\") +\r\n            (x === 8 ? \" cell-bottom \" : \"\") +\r\n            (y === 2 || y === 5 ? \" cell-box-vertical \" : \"\") +\r\n            (x === 2 || x === 5 ? \" cell-box-horizontal \" : \"\") +\r\n            (selectedCell[0] === x && selectedCell[1] === y\r\n               ? \" cell-selected \"\r\n               : \"\") +\r\n            (currentlyAnimating[0] === x && currentlyAnimating[1] === y\r\n               ? \" animating \"\r\n               : \"\")\r\n         }\r\n         onClick={handleClick}\r\n      >\r\n         <h3>{gridNumbers[x][y]}</h3>\r\n      </div>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport \"./SudokuGrid.css\";\r\nimport Cell from \"./Cell/Cell.jsx\";\r\n\r\nexport default function SudokuGrid(props) {\r\n   const {\r\n      gridNumbers,\r\n      selectedCell,\r\n      setSelectedCell,\r\n      currentlyAnimating,\r\n   } = props;\r\n\r\n   // this creates a new sudoku grid consisting of 9x9 empty\r\n   const createGrid = () => {\r\n      const grid = [];\r\n      for (let i = 0; i < 9; i++) {\r\n         grid.push([]);\r\n         for (let j = 0; j < 9; j++)\r\n            grid[i].push(\r\n               <Cell\r\n                  x={i}\r\n                  y={j}\r\n                  gridNumbers={gridNumbers}\r\n                  selectedCell={selectedCell}\r\n                  setSelectedCell={setSelectedCell}\r\n                  currentlyAnimating={currentlyAnimating}\r\n                  key={9 * i + j}\r\n               />\r\n            );\r\n      }\r\n      return grid;\r\n   };\r\n\r\n   return <div className=\"grid\">{createGrid()}</div>;\r\n}\r\n","// this function returns all the cells that have invalid numbers in them\r\nexport const checkValidity = (grid) => {\r\n   const invalidCells = [];\r\n\r\n   for (let i = 0; i < 9; i++)\r\n      for (let j = 0; j < 9; j++) {\r\n         if (!valid(i, j, grid) && grid[i][j]) invalidCells.push([i, j]);\r\n      }\r\n\r\n   return invalidCells;\r\n};\r\n\r\n// this function checks if the current choice for grid[row][col] is valid\r\nexport const valid = (row, col, grid) => {\r\n   // check the row for the same number\r\n   for (let j = 0; j < 9; j++)\r\n      if (grid[row][col] === grid[row][j] && j !== col) return false;\r\n\r\n   // check the column\r\n   for (let i = 0; i < 9; i++)\r\n      if (grid[row][col] === grid[i][col] && i !== row) return false;\r\n\r\n   // check the smaller \"box\"\r\n\r\n   // the number of the box that the current element is in\r\n   const verticalNumber = Math.floor(row / 3);\r\n   const horizontalNumber = Math.floor(col / 3);\r\n\r\n   // iterate through the whole grid\r\n   for (let i = 0; i < 9; i++)\r\n      for (let j = 0; j < 9; j++) {\r\n         const vertical = Math.floor(i / 3);\r\n         const horizontal = Math.floor(j / 3);\r\n\r\n         // if the elements are not in the same box or the element is the current element, skip it\r\n         if (\r\n            vertical !== verticalNumber ||\r\n            horizontal !== horizontalNumber ||\r\n            (i === row && j === col)\r\n         )\r\n            continue;\r\n\r\n         if (grid[i][j] === grid[row][col]) return false;\r\n      }\r\n\r\n   // otherwise it's ok\r\n   return true;\r\n};\r\n","import { valid } from \"./ValidityChecker.js\";\r\n\r\nlet grid = [],\r\n   newGrid = [],\r\n   changesInOrder = [],\r\n   cellsChanged = [];\r\n\r\n// a variable that becomes true if we find a solution to the puzzle\r\nlet found = false;\r\n\r\n// this function checks if the algorithm is finished\r\nconst stop = (row, col) => {\r\n   return row > 8;\r\n};\r\n\r\nconst backtracking = (row, col) => {\r\n   if (found) return;\r\n   // if the algorithm finished, print the completed puzzle\r\n   if (stop(row, col)) {\r\n      //console.log(newGrid);\r\n      found = true;\r\n      return;\r\n   }\r\n\r\n   // if the current cell already has a number, skip it\r\n   if (grid[row][col]) {\r\n      if (col === 8) backtracking(row + 1, 0);\r\n      else backtracking(row, col + 1);\r\n\r\n      // otherwise check every single possibility, and if it is valid go to the next cell\r\n   } else {\r\n      for (let i = 1; i <= 9 && !found; i++) {\r\n         newGrid[row][col] = i;\r\n\r\n         changesInOrder.push(newGrid.map((r) => [...r]));\r\n         cellsChanged.push([row, col]);\r\n\r\n         if (valid(row, col, newGrid)) {\r\n            if (col === 8) backtracking(row + 1, 0);\r\n            else backtracking(row, col + 1);\r\n         }\r\n      }\r\n\r\n      // before we go back, we should reset the number in the current cell\r\n      // only if we didn't already find a solution\r\n      if (!found) {\r\n         newGrid[row][col] = null;\r\n         changesInOrder.push(newGrid.map((r) => [...r]));\r\n         cellsChanged.push([row, col]);\r\n      }\r\n   }\r\n};\r\n\r\n// this is the function that executes the backtracking algorithm and returns every single\r\n// change in the grid, in order to animate the algorithm\r\nexport default function solve(parameterGrid) {\r\n   //reset all the arrays and variables\r\n   grid = [];\r\n   newGrid = [];\r\n   changesInOrder = [];\r\n   cellsChanged = [];\r\n   found = false;\r\n\r\n   // make copies of the state\r\n   grid = parameterGrid.map((r) => [...r]);\r\n   newGrid = grid.map((r) => [...r]);\r\n\r\n   // execute the algorithm\r\n   backtracking(0, 0);\r\n\r\n   // return the changes\r\n   return [changesInOrder, cellsChanged];\r\n}\r\n","import React from \"react\";\r\nimport \"./Key.css\";\r\n\r\nexport default function Key(props) {\r\n   const { number, gridNumbers, setGridNumbers, selectedCell } = props;\r\n\r\n   // when the user clicks on a key\r\n   const handleClick = () => {\r\n      // if there is no selected cell, this won't affect the grid\r\n      if (selectedCell[0] === null) return;\r\n\r\n      // otherwise we make a copy of the grid and add a change to the selected cell\r\n      const [x, y] = selectedCell;\r\n      const newGridNumbers = gridNumbers.map((r) => [...r]);\r\n\r\n      newGridNumbers[x][y] = number;\r\n      setGridNumbers(newGridNumbers);\r\n   };\r\n\r\n   return (\r\n      <div\r\n         className={\"key key-\" + (number ? number : \"delete\")}\r\n         onClick={handleClick}\r\n      >\r\n         <h4>{number ? number : \"Erase\"}</h4>\r\n      </div>\r\n   );\r\n}\r\n","import React from \"react\";\r\n\r\nexport function SolveIcon() {\r\n   return (\r\n      <svg\r\n         id=\"Capa_1\"\r\n         height=\"32\"\r\n         viewBox=\"0 0 512 512\"\r\n         width=\"32\"\r\n         stroke=\"#000\"\r\n         strokeLinecap=\"round\"\r\n         strokeLinejoin=\"round\"\r\n         strokeWidth=\"10\"\r\n         xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n         <g>\r\n            <g>\r\n               <path d=\"m270.402 417.97c0 .356-.073.706-.213 1.019-.15.333-.363.63-.617.858-3.3 2.954-6.221 6.312-8.681 9.98-2.302 3.429-1.386 8.074 2.043 10.375 1.279.858 2.727 1.269 4.159 1.269 2.409 0 4.774-1.162 6.216-3.312 1.768-2.634 3.867-5.047 6.239-7.171 1.83-1.639 3.273-3.618 4.286-5.877.997-2.22 1.524-4.689 1.524-7.141 0-9.66-7.858-17.518-17.517-17.518h-97.993c-4.571 0-8.289-3.719-8.289-8.289v-97.354c0-4.852-1.886-9.41-5.311-12.835-3.431-3.431-7.993-5.321-12.845-5.321-5.111 0-10.026 2.188-13.483 6.002-7.169 7.901-17.386 12.433-28.032 12.433-10.643 0-20.496-4.298-27.741-12.101-7.24-7.796-10.789-17.972-9.997-28.649 1.39-18.63 16.501-33.607 35.147-34.839 11.661-.769 22.821 3.736 30.619 12.345 1.697 1.88 3.736 3.365 6.078 4.423 3.165 1.421 6.669 1.897 10.129 1.381 8.799-1.314 15.435-9.179 15.435-18.297v-97.01c0-4.571 3.718-8.289 8.289-8.289h97.354c10.011 0 18.156-8.145 18.156-18.156v-1.585c0-5.095-2.184-10.006-6.005-13.488-7.899-7.158-12.43-17.374-12.43-28.028 0-10.645 4.299-20.498 12.103-27.742 7.797-7.237 17.971-10.782 28.65-9.986 18.627 1.381 33.603 16.493 34.837 35.148.767 11.656-3.736 22.819-12.357 30.629-3.81 3.455-5.995 8.363-5.995 13.466v1.585c0 10.011 8.145 18.156 18.156 18.156h23.388c4.13 0 7.478-3.348 7.478-7.478s-3.347-7.478-7.478-7.478h-23.388c-1.764 0-3.2-1.436-3.2-3.2v-1.585c0-.891.395-1.761 1.083-2.385 12.023-10.892 18.306-26.453 17.236-42.695-1.721-26.05-22.638-47.149-48.65-49.077-14.871-1.113-29.054 3.84-39.933 13.938-10.731 9.96-16.885 24.067-16.885 38.703 0 14.867 6.321 29.122 17.328 39.097.704.641 1.107 1.522 1.107 2.419v1.585c0 1.765-1.436 3.2-3.2 3.2h-97.354c-12.817 0-23.244 10.427-23.244 23.244v97.01c0 1.74-1.181 3.28-2.69 3.506-.634.095-1.239.016-1.779-.226-.434-.196-.811-.468-1.125-.817-10.891-12.023-26.447-18.303-42.695-17.237-26.038 1.72-47.137 22.636-49.077 48.653-1.104 14.874 3.85 29.056 13.951 39.935 9.96 10.728 24.066 16.88 38.7 16.88 14.855 0 29.109-6.32 39.109-17.341.631-.696 1.508-1.094 2.406-1.094 1.157 0 1.919.59 2.27.941.348.347.93 1.103.93 2.26v97.354c0 12.817 10.427 23.244 23.244 23.244h97.993c1.412 0 2.561 1.149 2.561 2.563z\" />\r\n               <path d=\"m444.662 200.178c10.577-2.279 18.253-11.823 18.253-22.695v-55.143c0-12.817-10.427-23.244-23.244-23.244h-39.174c-4.13 0-7.478 3.348-7.478 7.478s3.347 7.478 7.478 7.478h39.174c4.57 0 8.289 3.718 8.289 8.289v55.143c0 3.874-2.712 7.27-6.448 8.076-30.083 6.481-51.917 33.551-51.917 64.365 0 30.811 21.834 57.876 51.917 64.356 3.737.805 6.448 4.201 6.448 8.075v69.808c0 4.571-3.718 8.289-8.289 8.289h-97.992c-4.677 0-9.076 1.822-12.386 5.131-3.309 3.309-5.132 7.708-5.132 12.387 0 4.964 2.124 9.715 5.829 13.037 8.011 7.175 12.606 17.449 12.606 28.189 0 10.494-4.413 20.61-12.109 27.752-7.795 7.236-17.959 10.779-28.641 9.985-16.867-1.259-30.938-13.76-34.218-30.4-.797-4.052-4.729-6.691-8.782-5.891-4.051.798-6.689 4.73-5.891 8.782 4.575 23.221 24.222 40.666 47.778 42.423 1.372.103 2.736.153 4.093.153 13.362 0 25.959-4.925 35.835-14.091 10.733-9.963 16.89-24.073 16.89-38.713 0-14.986-6.409-29.321-17.58-39.326-.543-.487-.855-1.18-.855-1.9 0-.923.47-1.531.751-1.811.28-.281.89-.752 1.812-.752h97.992c12.817 0 23.244-10.427 23.244-23.244v-69.808c0-10.872-7.677-20.417-18.255-22.696-23.242-5.006-40.11-25.923-40.11-49.736 0-23.817 16.869-44.738 40.112-49.746z\" />\r\n            </g>\r\n         </g>\r\n      </svg>\r\n   );\r\n}\r\n\r\nexport function DeleteIcon() {\r\n   return (\r\n      <svg\r\n         id=\"Capa_1\"\r\n         height=\"32\"\r\n         viewBox=\"0 0 320.941 320.941\"\r\n         width=\"32\"\r\n         xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n         <path d=\"m290.853 40.118h-181.049c-9.06 0-17.551 4.016-23.301 11.038l-84.241 102.968c-3.017 3.692-3.017 9.001 0 12.693l84.251 102.978c5.739 7.013 14.231 11.028 23.291 11.028h181.048c16.592 0 30.088-13.497 30.088-30.088v-180.529c.001-16.592-13.496-30.088-30.087-30.088zm10.029 210.617c0 5.534-4.496 10.029-10.029 10.029h-181.049c-3.026 0-5.857-1.342-7.767-3.673l-79.05-96.621 79.04-96.611c1.92-2.341 4.75-3.683 7.777-3.683h181.048c5.534 0 10.029 4.496 10.029 10.029.001.001.001 180.53.001 180.53z\" />\r\n         <path d=\"m223.585 103.232-43.056 43.056-43.056-43.056-14.182 14.182 43.056 43.056-43.056 43.056 14.182 14.182 43.056-43.056 43.056 43.056 14.182-14.182-43.056-43.056 43.056-43.056z\" />\r\n      </svg>\r\n   );\r\n}\r\n\r\nexport function ResetIcon() {\r\n   return (\r\n      <svg\r\n         xmlns=\"http://www.w3.org/2000/svg\"\r\n         viewBox=\"0 0 32 32\"\r\n         fill=\"none\"\r\n         stroke=\"#000\"\r\n         strokeLinecap=\"round\"\r\n         strokeLinejoin=\"round\"\r\n         strokeWidth=\"2\"\r\n         height=\"32\"\r\n         width=\"32\"\r\n      >\r\n         <path d=\"M29 16 C29 22 24 29 16 29 8 29 3 22 3 16 3 10 8 3 16 3 21 3 25 6 27 9 M20 10 L27 9 28 2\" />\r\n      </svg>\r\n   );\r\n}\r\n\r\nexport function QuestionMarkIcon() {\r\n   return (\r\n      <svg\r\n         height=\"32pt\"\r\n         viewBox=\"0 0 512 512\"\r\n         width=\"32pt\"\r\n         xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n         <path d=\"m255 401c-11.046875 0-20-8.953125-20-20s8.953125-20 20-20 20 8.953125 20 20-8.953125 20-20 20zm20-90v-26.855469c38.671875-9.355469 65.464844-44.441406 63.9375-84.117187-1.660156-43.203125-37.105469-78.332032-80.695312-79.964844-23.289063-.882812-45.28125 7.460938-61.90625 23.472656-16.339844 15.738282-25.335938 36.855469-25.335938 59.464844 0 11.046875 8.953125 20 20 20s20-8.953125 20-20c0-11.640625 4.644531-22.527344 13.082031-30.652344 8.726563-8.402344 20.316407-12.773437 32.660157-12.316406 22.816406.859375 41.363281 19.101562 42.226562 41.535156.800781 20.90625-13.628906 39.378906-34.320312 43.917969-17.457032 3.832031-29.648438 18.917969-29.648438 36.691406v28.824219c0 11.046875 8.953125 20 20 20s20-8.953125 20-20zm113.460938 164.105469c9.449218-5.722657 12.46875-18.019531 6.746093-27.464844-5.726562-9.449219-18.023437-12.46875-27.46875-6.746094-33.59375 20.347657-72.234375 31.105469-111.738281 31.105469-119.101562 0-216-96.898438-216-216s96.898438-216 216-216 216 96.898438 216 216c0 42.589844-12.664062 84.042969-36.625 119.886719-6.140625 9.179687-3.671875 21.601562 5.507812 27.742187 9.183594 6.140625 21.605469 3.671875 27.742188-5.511718 28.378906-42.441407 43.375-91.585938 43.375-142.117188 0-68.378906-26.628906-132.667969-74.980469-181.019531-48.351562-48.351563-112.640625-74.980469-181.019531-74.980469s-132.667969 26.628906-181.019531 74.980469c-48.351563 48.351562-74.980469 112.640625-74.980469 181.019531s26.628906 132.667969 74.980469 181.019531c48.351562 48.351563 112.640625 74.980469 181.019531 74.980469 46.8125 0 92.617188-12.757812 132.460938-36.894531zm0 0\" />\r\n      </svg>\r\n   );\r\n}\r\n\r\nexport function XIcon() {\r\n   return (\r\n      <svg\r\n         height=\"20pt\"\r\n         viewBox=\"0 0 329.26933 329\"\r\n         width=\"20pt\"\r\n         xmlns=\"http://www.w3.org/2000/svg\"\r\n         className=\"x-icon\"\r\n      >\r\n         <path d=\"m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0\" />\r\n      </svg>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport \"./Keyboard.css\";\r\n\r\nimport solve from \"../../Algorithms/Solver.js\";\r\nimport Key from \"./Key/Key.jsx\";\r\nimport { SolveIcon, DeleteIcon, ResetIcon } from \"../../SVGs/Icons.jsx\";\r\nimport { checkValidity } from \"../../Algorithms/ValidityChecker.js\";\r\n\r\nexport default function Keyboard(props) {\r\n   const {\r\n      gridNumbers,\r\n      setGridNumbers,\r\n      selectedCell,\r\n      createNewGridNumbers,\r\n      setCurrentlyAnimating,\r\n      isAnimating,\r\n      setIsAnimating,\r\n   } = props;\r\n\r\n   // animate the changes in the grid when executing the backtracking algorithm\r\n   const animateGrid = (changesInOrder, cellsChanged) => {\r\n      setIsAnimating(true);\r\n\r\n      for (let i = 0; i < changesInOrder.length; i++) {\r\n         setTimeout(() => {\r\n            setGridNumbers(changesInOrder[i]);\r\n            setCurrentlyAnimating([cellsChanged[i][0], cellsChanged[i][1]]);\r\n         }, 20 * i);\r\n      }\r\n\r\n      // clean up the currently animating cell\r\n      setTimeout(() => {\r\n         setCurrentlyAnimating([null, null]);\r\n         setIsAnimating(false);\r\n      }, 20 * changesInOrder.length + 20);\r\n   };\r\n\r\n   // this function creates a keyboard consisting of 9 keys with the numbers from 1 to 9\r\n   const createKeyboard = () => {\r\n      const grid = [];\r\n\r\n      for (let i = 1; i <= 9; i++)\r\n         grid.push(\r\n            <Key\r\n               number={i}\r\n               gridNumbers={gridNumbers}\r\n               setGridNumbers={setGridNumbers}\r\n               selectedCell={selectedCell}\r\n               key={i}\r\n            />\r\n         );\r\n\r\n      return grid;\r\n   };\r\n\r\n   // uses the Solver.js file from the Algorithms folder in order to solve the puzzle\r\n   // and the ValidityChecker.js file in order to check the validity of the grid before starting\r\n   const solvePuzzle = () => {\r\n      const copy = gridNumbers.map((r) => [...r]);\r\n\r\n      const invalidCells = checkValidity(copy);\r\n\r\n      // if there are invalid cells, highlight them for a period of time\r\n      if (invalidCells.length) {\r\n         for (let cell of invalidCells) {\r\n            document\r\n               .querySelector(\".cell-\" + cell[0] + \"-\" + cell[1])\r\n               .classList.add(\"invalid\");\r\n            setTimeout(\r\n               () =>\r\n                  document\r\n                     .querySelector(\".cell-\" + cell[0] + \"-\" + cell[1])\r\n                     .classList.remove(\"invalid\"),\r\n               2000\r\n            );\r\n         }\r\n         // otherwise animate the solving algorithm\r\n      } else {\r\n         const [changesInOrder, cellsChanged] = solve(copy);\r\n         animateGrid(changesInOrder, cellsChanged);\r\n      }\r\n   };\r\n\r\n   // resets every cell in the grid\r\n   const reset = () => {\r\n      setGridNumbers(createNewGridNumbers());\r\n   };\r\n\r\n   // erases the number from the selected cell\r\n   const erase = () => {\r\n      if (selectedCell[0] === null) return;\r\n\r\n      const [x, y] = selectedCell;\r\n      const newGridNumbers = gridNumbers.map((r) => [...r]);\r\n\r\n      newGridNumbers[x][y] = null;\r\n      setGridNumbers(newGridNumbers);\r\n   };\r\n\r\n   return (\r\n      <div className=\"keyboard-and-overlay\">\r\n         <div className={\"animating-overlay\" + (isAnimating ? \"\" : \" hidden \")}>\r\n            <h2>Solving...</h2>\r\n         </div>\r\n         <div className=\"keyboard\">\r\n            <button className=\"solve-button\" onClick={solvePuzzle}>\r\n               <SolveIcon />\r\n               <h4>Solve</h4>\r\n            </button>\r\n\r\n            {createKeyboard()}\r\n\r\n            <button className=\"delete-button\" onClick={erase}>\r\n               <DeleteIcon />\r\n               <h4>Delete</h4>\r\n            </button>\r\n\r\n            <button className=\"reset-button\" onClick={reset}>\r\n               <ResetIcon />\r\n               <h4>Reset</h4>\r\n            </button>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nimport { QuestionMarkIcon } from \"../../SVGs/Icons.jsx\";\r\n\r\nexport default function Navbar({ showTutorial, setShowTutorial }) {\r\n   const handleButtonClick = () => {\r\n      setShowTutorial(!showTutorial);\r\n   };\r\n\r\n   return (\r\n      <nav>\r\n         <h2 className=\"title\">SUDOKU SOLVER</h2>\r\n         <button className=\"tutorial-button\" onClick={handleButtonClick}>\r\n            <QuestionMarkIcon />\r\n         </button>\r\n      </nav>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport \"./TutorialPanel.css\";\r\n\r\nimport { XIcon } from \"../../SVGs/Icons.jsx\";\r\n\r\nexport default function TutorialPanel({ show, setShow }) {\r\n   const handleClick = () => {\r\n      setShow(!show);\r\n   };\r\n\r\n   return (\r\n      <div className={\"tutorial-panel\" + (show ? \" \" : \" hide \")}>\r\n         <div className=\"black-overlay\"></div>\r\n         <div className=\"panel\">\r\n            <button onClick={handleClick}>\r\n               <XIcon />\r\n            </button>\r\n            <h1 className=\"title\">This is my Sudoku Solver app!</h1>\r\n            <h3 className=\"text-1\">\r\n               This app can solve any Sudoku puzzle using the backtracking\r\n               algorithm.\r\n            </h3>\r\n            <h3 className=\"text-2\">\r\n               You just need to enter the numbers using the on-screen or the\r\n               physical keyboard and click on the solve button.\r\n            </h3>\r\n            <h3 className=\"text-3\">\r\n               The app will highlight any wrongly placed numbers, so don't worry\r\n               about making mistakes, as you can correct them after.\r\n            </h3>\r\n            <h3 className=\"text-4\">Good luck!</h3>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport SudokuGrid from \"./Components/SudokuGrid/SudokuGrid.jsx\";\r\nimport Keyboard from \"./Components/Keyboard/Keyboard.jsx\";\r\nimport Navbar from \"./Components/Navbar/Navbar.jsx\";\r\nimport TutorialPanel from \"./Components/TutorialPanel/TutorialPanel.jsx\";\r\n\r\nexport default function App() {\r\n   const [gridNumbers, setGridNumbers] = useState(createNewGridNumbers());\r\n   const [selectedCell, setSelectedCell] = useState([null, null]);\r\n   const [currentlyAnimating, setCurrentlyAnimating] = useState([null, null]);\r\n   const [isAnimating, setIsAnimating] = useState(false);\r\n   const [showTutorial, setShowTutorial] = useState(true);\r\n\r\n   // a function that changes the selected cell based on the key pressed by the user\r\n   const changeSelectedCell = (e) => {\r\n      let [x, y] = [...selectedCell];\r\n      if (x === null || y === null) return;\r\n\r\n      if (e.code === \"ArrowDown\" && x < 8) x++;\r\n      else if (e.code === \"ArrowUp\" && x > 0) x--;\r\n      if (e.code === \"ArrowLeft\" && y > 0) y--;\r\n      else if (e.code === \"ArrowRight\" && y < 8) y++;\r\n\r\n      setSelectedCell([x, y]);\r\n   };\r\n\r\n   // a function that chagnes the number in a cell by pressing keys\r\n   const changeNumberInCell = (e) => {\r\n      let [x, y] = [...selectedCell];\r\n      if (x === null || y === null) return;\r\n\r\n      const gridCopy = gridNumbers.map((r) => [...r]);\r\n      let value = gridCopy[x][y];\r\n      for (let i = 1; i <= 9; i++)\r\n         if (e.code === \"Digit\" + i || e.code === \"Numpad\" + i) value = i;\r\n      if (e.code === \"Backspace\") value = null;\r\n\r\n      gridCopy[x][y] = value;\r\n      setGridNumbers(gridCopy);\r\n   };\r\n\r\n   useEffect(() => {\r\n      document.addEventListener(\"keydown\", changeSelectedCell);\r\n      return () => document.removeEventListener(\"keydown\", changeSelectedCell);\r\n   });\r\n\r\n   useEffect(() => {\r\n      document.addEventListener(\"keydown\", changeNumberInCell);\r\n      return () => document.removeEventListener(\"keydown\", changeNumberInCell);\r\n   });\r\n\r\n   return (\r\n      <div className=\"App\">\r\n         <TutorialPanel show={showTutorial} setShow={setShowTutorial} />\r\n         <Navbar\r\n            gridNumbers={gridNumbers}\r\n            setGridNumbers={setGridNumbers}\r\n            showTutorial={showTutorial}\r\n            setShowTutorial={setShowTutorial}\r\n         />\r\n         <SudokuGrid\r\n            gridNumbers={gridNumbers}\r\n            selectedCell={selectedCell}\r\n            setSelectedCell={setSelectedCell}\r\n            currentlyAnimating={currentlyAnimating}\r\n         />\r\n         <Keyboard\r\n            gridNumbers={gridNumbers}\r\n            setGridNumbers={setGridNumbers}\r\n            selectedCell={selectedCell}\r\n            createNewGridNumbers={createNewGridNumbers}\r\n            setCurrentlyAnimating={setCurrentlyAnimating}\r\n            isAnimating={isAnimating}\r\n            setIsAnimating={setIsAnimating}\r\n         />\r\n      </div>\r\n   );\r\n}\r\n\r\n// this creates a 9x9 matrix with null elements\r\nconst createNewGridNumbers = () => {\r\n   const numbers = [];\r\n\r\n   for (let i = 0; i < 9; i++) {\r\n      numbers.push([]);\r\n      for (let j = 0; j < 9; j++) numbers[i].push(null);\r\n   }\r\n\r\n   return numbers;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}